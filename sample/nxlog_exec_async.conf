Panic Soft

define ROOT C:\Program Files\nxlog

#ModuleDir %ROOT%\modules
#CacheDir  %ROOT%\data
#SpoolDir  %ROOT%\data

define CERTDIR %ROOT%\cert
define CONFDIR %ROOT%\conf

# Note that these two lines define constants only; the log file location
# is ultimately set by the `LogFile` directive (see below). The
# `MYLOGFILE` define is also used to rotate the log file automatically
# (see the `_fileop` block).
define LOGDIR %ROOT%\data
define MYLOGFILE %LOGDIR%\nxlog.log

# By default, `LogFile %MYLOGFILE%` is set in log4ensics.conf. This
# allows the log file location to be modified via NXLog Manager. If you
# are not using NXLog Manager, you can instead set `LogFile` below and
# disable the `include` line.
#LogFile %MYLOGFILE%
include %CONFDIR%\log4ensics.conf

<Extension _syslog>
    Module  xm_syslog
</Extension>

# This block rotates `%MYLOGFILE%` on a schedule. Note that if `LogFile`
# is changed in log4ensics.conf via NXLog Manager, rotation of the new
# file should also be configured there.
<Extension _fileop>
    Module  xm_fileop

    # Check the size of our log file hourly, rotate if larger than 5MB
    <Schedule>
        Every   1 hour
        <Exec>
            if ( file_exists('%MYLOGFILE%') and
                 (file_size('%MYLOGFILE%') >= 5M) )
            {
                 file_cycle('%MYLOGFILE%', 8);
            }
        </Exec>
    </Schedule>

    # Rotate our log file every week on Sunday at midnight
    <Schedule>
        When    @weekly
        Exec    if file_exists('%MYLOGFILE%') file_cycle('%MYLOGFILE%', 8);
    </Schedule>
</Extension>

# CONFIG FOR WIN TESTING PURPOSES !!
# using exec_async

define ACTION_ERROR { log_info("error found:"); log_info($raw_event); drop();}
define ACTION_WARNING { log_info("warning found:"); log_info($raw_event); drop();}

<Extension _exec>
    Module  xm_exec
</Extension>

<Input in>
    Module  im_file
    File    "D:\\mst-sender\\sample\\test.log"
        <Exec>
        if $raw_event =~ /(\S+)\ (.+) \[ERROR (.+)/
        {
				exec_async("C:\\Python27\\python.exe", "D:\\mst-sender\\ms-sender.py", "--log_level", "ERROR", "--message", $raw_event);
				%ACTION_ERROR%
        }

		if $raw_event =~ /(\S+)\ (.+) \[WARNING (.+)/
		{
				exec_async("C:\\Python27\\python.exe", "D:\\mst-sender\\ms-sender.py", "--log_level", "WARNING", "--message", $raw_event);
				%ACTION_WARNING%
        }
        </Exec>
</Input>

<Output out1>
    Module  om_null
</Output>

<Route 1>
    Path    in => out1
</Route>
